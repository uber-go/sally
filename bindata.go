// Code generated by go-bindata.
// sources:
// templates/index.tpl
// templates/package.tpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x34\x8e\x31\x0b\xc2\x30\x10\x46\xe7\xeb\xaf\xf8\x84\x8e\xda\xec\x72\x66\x51\x67\x8b\xb8\x38\x46\x7b\xd4\xd2\xd8\x8a\x5a\xa1\x84\xfb\xef\x92\x84\x4e\xc7\x83\x77\xf7\x8e\x57\x87\xd3\xfe\x72\xad\x8f\x78\x7c\x9f\xde\x16\x9c\x07\xf1\x6d\x6c\x66\x5b\x10\xf1\x14\x91\x28\x04\xbc\xdd\xd0\x0a\xca\x5e\xe6\x35\xca\x9f\xf3\x93\x60\xbb\x43\x55\xbb\x7b\xef\x5a\xf9\x40\x35\x8a\xc4\xbe\xb3\x21\x24\x0f\xaa\xd8\x20\x42\xd2\xab\xb3\xbc\x46\xa8\xb2\xf1\xdd\x72\x54\x86\x26\x2f\xb2\x49\x25\x36\xb9\xcc\x26\x7f\xf2\x0f\x00\x00\xff\xff\xb2\xe2\x86\x15\xa1\x00\x00\x00")

func templatesIndexTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexTpl,
		"templates/index.tpl",
	)
}

func templatesIndexTpl() (*asset, error) {
	bytes, err := templatesIndexTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.tpl", size: 161, mode: os.FileMode(420), modTime: time.Unix(1475252769, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPackageTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\xc1\x4e\x03\x21\x14\x45\xf7\x7e\xc5\x13\xd7\x1d\x5c\x2b\xd3\x4d\xd5\x55\xa3\x4d\xa3\x0b\x97\x38\x73\x0b\x24\xc0\xab\xf0\xda\xc4\x4c\xfa\xef\xa6\x4e\x4d\x4d\xb4\xb1\x2b\xe0\x42\xce\xb9\x80\xb9\xbc\x7b\x9a\x3d\xbf\x2e\xee\xc9\x4b\x8a\xd3\x0b\x33\x0e\x44\x44\xc6\xc3\xf6\xe3\xf4\x6b\x99\x20\x96\xb2\x4d\x68\x95\xe3\x49\x48\x6b\x2e\xa2\xa8\xe3\x2c\xc8\xd2\xaa\x61\xa0\x66\x66\x33\xe7\xd0\xd9\xf8\xb2\x9c\xd3\x6e\x47\x2e\x08\xed\xf3\x07\x48\xe7\xc7\x4c\x9d\x24\x56\xde\x94\x0e\xff\x10\xbd\xc8\xba\xde\x68\xbd\xdf\x5b\x62\xcd\x27\x32\x2d\x05\xd0\xc9\x56\x41\x19\x74\x1f\xca\x99\xa7\xf4\xb0\x0a\x11\xbb\xab\xf9\x10\x43\xc6\xef\xb2\x7b\xc8\x04\xef\x9b\xb0\x6d\x55\xc1\xaa\xa0\xfa\x1f\x85\xaf\x6f\x69\x53\x62\xfb\x6d\x72\xdc\x73\xd7\x70\x71\xfa\x8f\x9b\x1c\xd0\x46\x1f\x5f\xd9\xbc\x71\xff\x71\x34\x3e\xb2\xf8\x90\x1d\x09\x53\x05\xc8\xa3\xa0\xa1\x45\x84\xad\x20\x63\xc9\x17\xac\x5a\x75\xa6\x2b\xf1\x16\x64\x23\x67\x67\xb4\x9d\x36\x07\xf5\xe8\x33\x7a\xfc\xf3\xcf\x00\x00\x00\xff\xff\x9d\x18\xd9\x64\x0b\x02\x00\x00")

func templatesPackageTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPackageTpl,
		"templates/package.tpl",
	)
}

func templatesPackageTpl() (*asset, error) {
	bytes, err := templatesPackageTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/package.tpl", size: 523, mode: os.FileMode(420), modTime: time.Unix(1475263196, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.tpl": templatesIndexTpl,
	"templates/package.tpl": templatesPackageTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.tpl": &bintree{templatesIndexTpl, map[string]*bintree{}},
		"package.tpl": &bintree{templatesPackageTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

