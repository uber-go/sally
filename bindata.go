// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/index.html
// templates/package.html
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xc1\x6e\xdb\x30\x0c\xbd\xef\x2b\x38\x21\xbd\xad\xe2\x30\xec\x54\x28\xd9\x61\x19\xba\xc3\x80\x05\xdd\x76\xd8\x51\x91\x98\x58\x8d\x2c\x05\x12\xed\x2e\x28\xfc\xef\x43\xec\xb4\x69\x9d\xd9\x0d\x30\xd4\x17\x9b\xe6\x7b\x8f\x14\x49\x51\xbd\x9d\x7f\xff\xfc\xf3\xf7\xe2\x0b\x14\x5c\xfa\xd9\x1b\xd5\xbd\x00\x00\x54\x41\xda\x76\x9f\xad\xe9\x5d\xd8\x40\x22\x3f\x15\x99\x77\x9e\x72\x41\xc4\x02\x8a\x44\xab\xa9\x28\x98\xb7\xf9\x0a\xd1\xd8\x70\x9b\xa5\xf1\xb1\xb2\x2b\xaf\x13\x49\x13\x4b\xd4\xb7\xfa\x0f\x7a\xb7\xcc\x98\x37\xe4\x89\x63\xc0\x0f\xf2\xbd\xfc\xf8\x68\xca\xd2\x05\x69\x72\x16\x80\x87\xd0\x78\x8c\xad\x96\xd1\xee\x9e\xa4\x61\x5d\x0d\xc6\xeb\x9c\xa7\xc2\xc4\xc0\xda\x05\x4a\xe2\xe8\xef\x63\x52\xbc\xeb\x79\x5b\x04\xeb\xa5\xa7\x07\x4c\x75\xb9\xaa\xbc\xbf\xbc\x73\x96\x8b\x7f\x80\x3b\xc2\xf3\x6a\x9c\xfa\xd3\xb0\xf3\x20\x30\x5b\x68\xb3\xd1\x6b\x52\xc8\xc5\xcb\xe0\x1f\xb1\x4a\xe6\x4c\xec\x3c\x9a\xaa\xa4\xc0\x9a\x5d\x0c\xe3\x14\x85\x43\x99\xee\x79\x83\x67\x54\xfc\xbc\x0d\xfd\xe7\xfe\x1e\x92\x0e\x6b\x82\xc9\x86\x76\xef\x60\x52\x6b\x5f\x11\x5c\x4d\x41\x1e\x0e\x9d\xa1\x69\xc6\xd8\x13\x57\x6e\x63\xe2\x85\xe6\x62\x4f\xdb\x26\x17\x78\x05\xe2\xa2\xc6\x8b\x5a\xc0\x44\xfe\xba\xf9\xd6\x6a\x8f\xc9\x9c\xd1\x04\x3b\xeb\xc5\x6a\x1a\x85\x3c\xd2\xd8\x07\xda\x28\xa0\x05\xe9\xc3\x5d\x40\xdc\x87\x68\x0b\x20\x6f\x68\x1b\xa1\x69\xc4\xec\xe4\x97\x42\xfd\x42\xd0\x57\x49\x4b\x5e\x47\x1b\x8d\xfc\x1a\x33\x43\xd3\xe0\x49\x31\x06\xc6\xff\x44\xd5\x95\x6b\xc8\xc9\x9c\x2b\xfb\x29\xb3\xe6\x2a\xcb\x5c\xaf\x05\x68\xcf\x53\x71\x1d\xe7\xd1\x3c\x5e\xf8\xf1\x42\xfc\x57\xa5\x86\x07\x1e\xba\xc9\xa3\x60\x87\x86\x4a\xe1\xc0\xd8\x2b\x6c\x17\x48\x6f\xed\xa0\x75\xf5\x93\x4d\x75\x34\x15\x76\x32\x0a\xbb\xf5\xfa\x37\x00\x00\xff\xff\x5e\x31\xf2\xd0\x76\x05\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 1398, mode: os.FileMode(420), modTime: time.Unix(1551814013, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPackageHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd1\x3f\x4f\xf3\x30\x10\x06\xf0\xfd\xfd\x14\xf7\x86\xb9\x35\x33\x38\x5d\x0a\x62\xa9\xa0\xaa\x60\x60\x34\xc9\xd3\xd8\x92\xed\x0b\xf6\xa5\x12\x8a\xf2\xdd\x51\x70\xa5\x82\x28\x82\xc9\x7f\xf5\xbb\x47\x77\xfa\xff\xcd\xc3\xfa\xf1\x79\x7b\x4b\x56\x82\x5f\xfd\xd3\x65\x21\x22\xd2\x16\xa6\x2d\xdb\x8f\x63\x80\x18\x8a\x26\xa0\xae\x3a\x5e\xb8\xd0\x73\x92\x8a\x1a\x8e\x82\x28\x75\x35\x8e\xb4\x5c\x9b\xc8\xd1\x35\xc6\x3f\xed\x36\x34\x4d\xd4\x39\x21\x2b\xd2\xe7\x2b\xa5\xe6\xf7\x1d\x7a\xa6\x69\xaa\x7e\x54\x33\x0f\xa9\xc1\x2f\xea\x19\xf1\xdc\x9d\x92\x04\xa8\x60\xb2\x20\x8d\xaa\x75\xe9\x8f\xbf\xd4\xb8\x77\x1e\xd3\xc5\x66\xf4\x2e\xe2\x7b\xd8\x19\x59\xe0\x75\x70\x87\xba\x4a\xd8\x27\x64\xfb\x29\xf0\xe5\x35\x0d\xc9\xd7\x73\x85\x3b\x6e\xb9\x29\x99\x8f\x88\x56\xa7\x9e\xea\x17\x6e\xdf\x4e\xf6\x3d\x8b\x75\xb1\x23\x61\xca\x00\x59\x24\x2c\x69\xeb\x61\x32\x48\x1b\xb2\x09\xfb\xd2\x8d\x2f\x6a\xe0\x03\xc8\x78\x8e\x9d\x56\x66\xb5\x3c\x16\x29\xb2\x56\x65\x96\xef\x01\x00\x00\xff\xff\x69\xc7\x6b\xa3\xe3\x01\x00\x00")

func templatesPackageHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesPackageHtml,
		"templates/package.html",
	)
}

func templatesPackageHtml() (*asset, error) {
	bytes, err := templatesPackageHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/package.html", size: 483, mode: os.FileMode(420), modTime: time.Unix(1546544917, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.html": templatesIndexHtml,
	"templates/package.html": templatesPackageHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
		"package.html": &bintree{templatesPackageHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

