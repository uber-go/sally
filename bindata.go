// Code generated by go-bindata.
// sources:
// templates/index.tpl
// templates/package.tpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesIndexTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb2\x51\x74\xf1\x77\x0e\x89\x0c\x70\x55\xc8\x28\xc9\xcd\xb1\xe3\xb2\x81\x50\x9c\x36\x49\xf9\x29\x95\x40\x9a\xd3\xa6\x14\xc4\xe5\xe4\xac\xae\x56\x28\x4a\xcc\x4b\x4f\x55\x50\xc9\x4e\xad\xd4\x51\x50\x29\x4b\xcc\x29\x4d\x55\xb0\xb2\x55\xd0\x0b\x48\x4c\xce\x4e\x4c\x4f\x2d\x56\xa8\xad\x05\x29\xe4\xb4\xc9\xc9\xb4\x03\xaa\x06\xa9\x03\x0a\x29\xe8\x2a\x80\x38\x60\xe5\x7a\x41\xa9\x05\xf9\x40\x31\x1b\x7d\xa0\x12\xa8\xa1\xa9\x79\x29\x10\x8d\x36\xfa\x60\x9b\x6c\xf4\x21\x36\xdb\xe8\x43\x5c\x02\x08\x00\x00\xff\xff\xb2\xe2\x86\x15\xa1\x00\x00\x00")

func templatesIndexTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexTpl,
		"templates/index.tpl",
	)
}

func templatesIndexTpl() (*asset, error) {
	bytes, err := templatesIndexTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.tpl", size: 161, mode: os.FileMode(420), modTime: time.Unix(1475274933, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesPackageTpl = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x91\x3d\x4f\xc3\x30\x10\x86\x77\x7e\xc5\x11\xe6\xd6\xcc\xe0\x74\x29\x1f\x4b\x05\x55\x05\x03\xa3\x49\xde\xc6\x96\x6c\x5f\xb1\x2f\x95\x50\x94\xff\x4e\xd2\x20\x95\x0a\x55\xe0\xc5\xf6\x6b\xeb\x79\xce\x67\x7d\x79\xf7\xbc\x7c\x79\x5b\xdf\x93\x95\xe0\x17\x17\x7a\x9a\x68\x18\xda\xc2\xd4\xd3\xf2\xb0\x0d\x10\x43\xd1\x04\x94\x45\xc3\x33\x17\x76\x9c\xa4\xa0\x8a\xa3\x20\x4a\x59\x74\x1d\xcd\x97\x26\x72\x74\x95\xf1\xaf\x9b\x15\xf5\x3d\x35\x4e\x68\xcc\x1f\x20\x95\x9d\xb2\xe2\x2c\x31\x73\x9b\x2a\xfc\x41\xb4\x22\xbb\x7c\xa3\xd4\x78\xb6\xc1\x8e\xcf\x64\x4a\x12\xa0\x82\xc9\x82\xd4\xa9\xda\xa5\x7f\xde\x52\xdd\xd6\x79\xf4\x57\xab\xce\xbb\x88\xdf\xc5\x8e\x90\x19\x3e\x5a\xb7\x2f\x8b\x84\x6d\x42\xb6\x3f\x0a\xbe\xbe\xa5\x36\xf9\x72\x34\x3c\x72\xcd\xd5\xc9\x8b\xb5\x3a\xf6\x53\xbf\x73\xfd\x79\x64\x3f\xb1\x58\x17\x1b\x12\xa6\x0c\x90\x45\xc2\x9c\xd6\x1e\x26\x83\xf4\x20\x1d\x4c\x53\x37\x4e\xa8\x81\xf7\x20\xe3\x39\x36\x5a\x99\xc5\xfc\x5b\x32\x91\x07\xd9\xe1\x1f\xbf\x02\x00\x00\xff\xff\x9e\xeb\xa6\xae\xdf\x01\x00\x00")

func templatesPackageTplBytes() ([]byte, error) {
	return bindataRead(
		_templatesPackageTpl,
		"templates/package.tpl",
	)
}

func templatesPackageTpl() (*asset, error) {
	bytes, err := templatesPackageTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/package.tpl", size: 479, mode: os.FileMode(420), modTime: time.Unix(1475275831, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/index.tpl": templatesIndexTpl,
	"templates/package.tpl": templatesPackageTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"index.tpl": &bintree{templatesIndexTpl, map[string]*bintree{}},
		"package.tpl": &bintree{templatesPackageTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

